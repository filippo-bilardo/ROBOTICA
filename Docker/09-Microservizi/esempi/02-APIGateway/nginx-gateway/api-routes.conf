server {
    listen 80;
    server_name api.localhost;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";

    # CORS headers
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
    add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";

    # Handle preflight requests
    location ~ ^/api/v1/(users|products|orders) {
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }
    }

    # User Service Routes
    location ~ ^/api/v1/users(/.*)?$ {
        limit_req zone=api_limit burst=20 nodelay;
        limit_conn conn_limit_per_ip 10;

        # Remove API prefix before forwarding
        rewrite ^/api/v1/users(/.*)?$ /users$1 break;
        
        proxy_pass http://user_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }

    # Product Service Routes
    location ~ ^/api/v1/products(/.*)?$ {
        limit_req zone=api_limit burst=30 nodelay;
        limit_conn conn_limit_per_ip 15;

        # Remove API prefix before forwarding
        rewrite ^/api/v1/products(/.*)?$ /products$1 break;
        
        proxy_pass http://product_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Caching for GET requests
        proxy_cache_methods GET HEAD;
        proxy_cache_valid 200 302 10m;
        proxy_cache_valid 404 1m;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 15s;
        proxy_read_timeout 15s;
    }

    # Order Service Routes
    location ~ ^/api/v1/orders(/.*)?$ {
        limit_req zone=api_limit burst=15 nodelay;
        limit_conn conn_limit_per_ip 10;

        # Remove API prefix before forwarding
        rewrite ^/api/v1/orders(/.*)?$ /orders$1 break;
        
        proxy_pass http://order_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 5s;
        proxy_send_timeout 20s;
        proxy_read_timeout 20s;
    }

    # Authentication routes with stricter rate limiting
    location ~ ^/api/v1/(login|register|refresh) {
        limit_req zone=login_limit burst=5 nodelay;
        limit_conn conn_limit_per_ip 5;

        proxy_pass http://user_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # API Documentation
    location /docs {
        return 301 https://documenter.getpostman.com/view/your-api-docs;
    }

    # Default route - API information
    location /api {
        default_type application/json;
        return 200 '{"message":"API Gateway","version":"1.0.0","endpoints":["/api/v1/users","/api/v1/products","/api/v1/orders"],"documentation":"/docs"}';
    }

    # Health check
    location /health {
        access_log off;
        default_type application/json;
        return 200 '{"status":"healthy","timestamp":"$time_iso8601"}';
    }

    # Fallback for undefined routes
    location / {
        default_type application/json;
        return 404 '{"error":"Route not found","message":"Please check the API documentation"}';
    }
}
