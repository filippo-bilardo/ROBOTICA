version: '3.8'

services:
  # Database per Kong
  kong-database:
    image: postgres:13
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - kong-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Migrazione database Kong
  kong-migration:
    image: kong:3.4-alpine
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - kong-net

  # Kong Gateway
  kong:
    image: kong:3.4-alpine
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000"  # Proxy
      - "8001:8001"  # Admin API
      - "8002:8002"  # Admin GUI
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migration:
        condition: service_completed_successfully
    networks:
      - kong-net
      - microservices-net
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Servizio Users
  user-service:
    build: ../services/user-service
    environment:
      PORT: 3000
      DB_URL: postgresql://users_db_user:password@user-db:5432/users_db
    depends_on:
      - user-db
    networks:
      - microservices-net

  user-db:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: users_db_user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users_db
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - microservices-net

  # Servizio Products  
  product-service:
    build: ../services/product-service
    environment:
      PORT: 3000
      REDIS_URL: redis://product-cache:6379
    depends_on:
      - product-cache
    networks:
      - microservices-net

  product-cache:
    image: redis:7-alpine
    networks:
      - microservices-net

  # Servizio Orders
  order-service:
    build: ../services/order-service
    environment:
      PORT: 3000
      MONGO_URL: mongodb://order-db:27017/orders
    depends_on:
      - order-db
    networks:
      - microservices-net

  order-db:
    image: mongo:6
    volumes:
      - order_db_data:/data/db
    networks:
      - microservices-net

volumes:
  kong_data:
  user_db_data:
  order_db_data:

networks:
  kong-net:
    driver: bridge
  microservices-net:
    driver: bridge
